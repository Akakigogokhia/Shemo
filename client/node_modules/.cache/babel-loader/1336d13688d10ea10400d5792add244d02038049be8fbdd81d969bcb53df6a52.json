{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AKAKI\\\\SocialMedia\\\\client\\\\src\\\\components\\\\chatOnline\\\\ChatOnline.jsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport useFetch from '../../hooks/useFetch';\nimport SuggestedFriends from '../suggestedFriends/SuggestedFriends';\nimport './chatOnline.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatOnline(_ref) {\n  _s();\n  let {\n    onlineUsers,\n    currentId,\n    setCurrentChat,\n    user\n  } = _ref;\n  const [friends, setFriends] = useState([]);\n  const [onlineFriends, setOnlineFriends] = useState([]);\n  const [suggestedFriends, setSuggestedFriends] = useState([]);\n  const {\n    data: users\n  } = useFetch('/users/all');\n  const PF = process.env.REACT_APP_PUBLIC_FOLDER;\n  useEffect(() => {\n    setSuggestedFriends(users.filter(u => !user.followings.includes(u._id) && user._id !== u._id));\n  }, [users]);\n  const handleClick = async friend => {\n    let res;\n    try {\n      res = await axios.get(`/conversations/find/${currentId}/${friend._id}`);\n      if (!res.data) {\n        try {\n          res = await axios.post('/conversations', {\n            senderId: currentId,\n            receiverId: friend._id\n          });\n        } catch (error) {}\n      }\n      setCurrentChat(res.data);\n    } catch (error) {}\n  };\n  useEffect(() => {\n    const getFriends = async () => {\n      const res = await axios.get('/users/friends/' + currentId);\n      setFriends(res.data);\n    };\n    getFriends();\n  }, [currentId]);\n  useEffect(() => {\n    setOnlineFriends(friends.filter(friend => {\n      return onlineUsers.includes(friend._id);\n    }));\n  }, [friends, onlineUsers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatOnline\",\n    children: suggestedFriends.map(friend => onlineFriends.includes(friend) ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatOnlineFriend\",\n      onClick: () => handleClick(friend),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatOnlineImgContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"chatOnlineImg\",\n          src: friend !== null && friend !== void 0 && friend.profilePicture ? PF + (friend === null || friend === void 0 ? void 0 : friend.profilePicture) : PF + 'person/noAvatar.png'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatOnlineBadge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatOnlineName\",\n        children: friend.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, friend._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(SuggestedFriends, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatOnline, \"DbZW3M9VRBAXho2OJxMAlxGSDfs=\", false, function () {\n  return [useFetch];\n});\n_c = ChatOnline;\nexport default ChatOnline;\nvar _c;\n$RefreshReg$(_c, \"ChatOnline\");","map":{"version":3,"names":["axios","useEffect","useState","useFetch","SuggestedFriends","ChatOnline","onlineUsers","currentId","setCurrentChat","user","friends","setFriends","onlineFriends","setOnlineFriends","suggestedFriends","setSuggestedFriends","data","users","PF","process","env","REACT_APP_PUBLIC_FOLDER","filter","u","followings","includes","_id","handleClick","friend","res","get","post","senderId","receiverId","error","getFriends","map","profilePicture","username"],"sources":["C:/Users/AKAKI/SocialMedia/client/src/components/chatOnline/ChatOnline.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport useFetch from '../../hooks/useFetch';\r\nimport SuggestedFriends from '../suggestedFriends/SuggestedFriends';\r\nimport './chatOnline.css';\r\n\r\nfunction ChatOnline({ onlineUsers, currentId, setCurrentChat, user }) {\r\n  const [friends, setFriends] = useState([]);\r\n  const [onlineFriends, setOnlineFriends] = useState([]);\r\n  const [suggestedFriends, setSuggestedFriends] = useState([]);\r\n  const { data: users } = useFetch('/users/all');\r\n  const PF = process.env.REACT_APP_PUBLIC_FOLDER;\r\n\r\n  useEffect(() => {\r\n    setSuggestedFriends(\r\n      users.filter(\r\n        (u) => !user.followings.includes(u._id) && user._id !== u._id\r\n      )\r\n    );\r\n  }, [users]);\r\n\r\n  const handleClick = async (friend) => {\r\n    let res;\r\n    try {\r\n      res = await axios.get(`/conversations/find/${currentId}/${friend._id}`);\r\n      if (!res.data) {\r\n        try {\r\n          res = await axios.post('/conversations', {\r\n            senderId: currentId,\r\n            receiverId: friend._id,\r\n          });\r\n        } catch (error) {}\r\n      }\r\n      setCurrentChat(res.data);\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getFriends = async () => {\r\n      const res = await axios.get('/users/friends/' + currentId);\r\n      setFriends(res.data);\r\n    };\r\n    getFriends();\r\n  }, [currentId]);\r\n\r\n  useEffect(() => {\r\n    setOnlineFriends(\r\n      friends.filter((friend) => {\r\n        return onlineUsers.includes(friend._id);\r\n      })\r\n    );\r\n  }, [friends, onlineUsers]);\r\n  return (\r\n    <div className='chatOnline'>\r\n      {suggestedFriends.map((friend) =>\r\n        onlineFriends.includes(friend) ? (\r\n          <div\r\n            className='chatOnlineFriend'\r\n            onClick={() => handleClick(friend)}\r\n            key={friend._id}\r\n          >\r\n            <div className='chatOnlineImgContainer'>\r\n              <img\r\n                className='chatOnlineImg'\r\n                src={\r\n                  friend?.profilePicture\r\n                    ? PF + friend?.profilePicture\r\n                    : PF + 'person/noAvatar.png'\r\n                }\r\n              />\r\n              <div className='chatOnlineBadge'></div>\r\n            </div>\r\n            <div className='chatOnlineName'>{friend.username}</div>\r\n          </div>\r\n        ) : (\r\n          <SuggestedFriends />\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatOnline;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,OAAO,kBAAkB;AAAC;AAE1B,SAASC,UAAU,OAAmD;EAAA;EAAA,IAAlD;IAAEC,WAAW;IAAEC,SAAS;IAAEC,cAAc;IAAEC;EAAK,CAAC;EAClE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM;IAAEc,IAAI,EAAEC;EAAM,CAAC,GAAGd,QAAQ,CAAC,YAAY,CAAC;EAC9C,MAAMe,EAAE,GAAGC,OAAO,CAACC,GAAG,CAACC,uBAAuB;EAE9CpB,SAAS,CAAC,MAAM;IACdc,mBAAmB,CACjBE,KAAK,CAACK,MAAM,CACTC,CAAC,IAAK,CAACd,IAAI,CAACe,UAAU,CAACC,QAAQ,CAACF,CAAC,CAACG,GAAG,CAAC,IAAIjB,IAAI,CAACiB,GAAG,KAAKH,CAAC,CAACG,GAAG,CAC9D,CACF;EACH,CAAC,EAAE,CAACT,KAAK,CAAC,CAAC;EAEX,MAAMU,WAAW,GAAG,MAAOC,MAAM,IAAK;IACpC,IAAIC,GAAG;IACP,IAAI;MACFA,GAAG,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAAE,uBAAsBvB,SAAU,IAAGqB,MAAM,CAACF,GAAI,EAAC,CAAC;MACvE,IAAI,CAACG,GAAG,CAACb,IAAI,EAAE;QACb,IAAI;UACFa,GAAG,GAAG,MAAM7B,KAAK,CAAC+B,IAAI,CAAC,gBAAgB,EAAE;YACvCC,QAAQ,EAAEzB,SAAS;YACnB0B,UAAU,EAAEL,MAAM,CAACF;UACrB,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE,CAAC;MACnB;MACA1B,cAAc,CAACqB,GAAG,CAACb,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOkB,KAAK,EAAE,CAAC;EACnB,CAAC;EAEDjC,SAAS,CAAC,MAAM;IACd,MAAMkC,UAAU,GAAG,YAAY;MAC7B,MAAMN,GAAG,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAAC,iBAAiB,GAAGvB,SAAS,CAAC;MAC1DI,UAAU,CAACkB,GAAG,CAACb,IAAI,CAAC;IACtB,CAAC;IACDmB,UAAU,EAAE;EACd,CAAC,EAAE,CAAC5B,SAAS,CAAC,CAAC;EAEfN,SAAS,CAAC,MAAM;IACdY,gBAAgB,CACdH,OAAO,CAACY,MAAM,CAAEM,MAAM,IAAK;MACzB,OAAOtB,WAAW,CAACmB,QAAQ,CAACG,MAAM,CAACF,GAAG,CAAC;IACzC,CAAC,CAAC,CACH;EACH,CAAC,EAAE,CAAChB,OAAO,EAAEJ,WAAW,CAAC,CAAC;EAC1B,oBACE;IAAK,SAAS,EAAC,YAAY;IAAA,UACxBQ,gBAAgB,CAACsB,GAAG,CAAER,MAAM,IAC3BhB,aAAa,CAACa,QAAQ,CAACG,MAAM,CAAC,gBAC5B;MACE,SAAS,EAAC,kBAAkB;MAC5B,OAAO,EAAE,MAAMD,WAAW,CAACC,MAAM,CAAE;MAAA,wBAGnC;QAAK,SAAS,EAAC,wBAAwB;QAAA,wBACrC;UACE,SAAS,EAAC,eAAe;UACzB,GAAG,EACDA,MAAM,aAANA,MAAM,eAANA,MAAM,CAAES,cAAc,GAClBnB,EAAE,IAAGU,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAES,cAAc,IAC3BnB,EAAE,GAAG;QACV;UAAA;UAAA;UAAA;QAAA,QACD,eACF;UAAK,SAAS,EAAC;QAAiB;UAAA;UAAA;UAAA;QAAA,QAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QACnC,eACN;QAAK,SAAS,EAAC,gBAAgB;QAAA,UAAEU,MAAM,CAACU;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAO;IAAA,GAblDV,MAAM,CAACF,GAAG;MAAA;MAAA;MAAA;IAAA,QAcX,gBAEN,QAAC,gBAAgB;MAAA;MAAA;MAAA;IAAA,QAClB;EACF;IAAA;IAAA;IAAA;EAAA,QACG;AAEV;AAAC,GA1EQrB,UAAU;EAAA,QAIOF,QAAQ;AAAA;AAAA,KAJzBE,UAAU;AA4EnB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}