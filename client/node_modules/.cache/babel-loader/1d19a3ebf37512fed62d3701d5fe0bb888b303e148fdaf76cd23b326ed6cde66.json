{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AKAKI\\\\SocialMedia\\\\client\\\\src\\\\components\\\\chatOnline\\\\ChatOnline.jsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport useFetch from '../../hooks/useFetch';\nimport './chatOnline.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatOnline(_ref) {\n  _s();\n  let {\n    onlineUsers,\n    currentId,\n    setCurrentChat\n  } = _ref;\n  const [friends, setFriends] = useState([]);\n  const [onlineFriends, setOnlineFriends] = useState([]);\n  const PF = process.env.REACT_APP_PUBLIC_FOLDER;\n  console.log(currentId);\n  const handleClick = async friend => {\n    let res;\n    const id = currentId;\n    try {\n      res = await axios.get(`/conversations/find/${currentId}/${friend._id}`);\n      if (!res.data) {\n        try {\n          res = await axios.post('/conversations', {\n            userId: id,\n            receiverId: friend._id\n          });\n        } catch (error) {}\n      }\n      setCurrentChat(res.data);\n    } catch (error) {}\n  };\n  useEffect(() => {\n    const getFriends = async () => {\n      const res = await axios.get('/users/friends/' + currentId);\n      setFriends(res.data);\n    };\n    getFriends();\n  }, [currentId]);\n  useEffect(() => {\n    setOnlineFriends(friends.filter(friend => {\n      return onlineUsers.includes(friend._id);\n    }));\n  }, [friends, onlineUsers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatOnline\",\n    children: onlineFriends.map(friend => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatOnlineFriend\",\n      onClick: () => handleClick(friend),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatOnlineImgContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"chatOnlineImg\",\n          src: friend !== null && friend !== void 0 && friend.profilePicture ? PF + (friend === null || friend === void 0 ? void 0 : friend.profilePicture) : PF + 'person/noAvatar.png'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatOnlineBadge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatOnlineName\",\n        children: friend.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, friend._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatOnline, \"LhrCBG2JdpC4LXNRz/CbesZ6zYg=\");\n_c = ChatOnline;\nexport default ChatOnline;\nvar _c;\n$RefreshReg$(_c, \"ChatOnline\");","map":{"version":3,"names":["axios","useEffect","useState","useFetch","ChatOnline","onlineUsers","currentId","setCurrentChat","friends","setFriends","onlineFriends","setOnlineFriends","PF","process","env","REACT_APP_PUBLIC_FOLDER","console","log","handleClick","friend","res","id","get","_id","data","post","userId","receiverId","error","getFriends","filter","includes","map","profilePicture","username"],"sources":["C:/Users/AKAKI/SocialMedia/client/src/components/chatOnline/ChatOnline.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport useFetch from '../../hooks/useFetch';\r\nimport './chatOnline.css';\r\n\r\nfunction ChatOnline({ onlineUsers, currentId, setCurrentChat }) {\r\n  const [friends, setFriends] = useState([]);\r\n  const [onlineFriends, setOnlineFriends] = useState([]);\r\n  const PF = process.env.REACT_APP_PUBLIC_FOLDER;\r\n\r\n  console.log(currentId);\r\n  const handleClick = async (friend) => {\r\n    let res;\r\n    const id = currentId;\r\n    try {\r\n      res = await axios.get(`/conversations/find/${currentId}/${friend._id}`);\r\n      if (!res.data) {\r\n        try {\r\n          res = await axios.post('/conversations', {\r\n            userId: id,\r\n            receiverId: friend._id,\r\n          });\r\n        } catch (error) {}\r\n      }\r\n      setCurrentChat(res.data);\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getFriends = async () => {\r\n      const res = await axios.get('/users/friends/' + currentId);\r\n      setFriends(res.data);\r\n    };\r\n    getFriends();\r\n  }, [currentId]);\r\n\r\n  useEffect(() => {\r\n    setOnlineFriends(\r\n      friends.filter((friend) => {\r\n        return onlineUsers.includes(friend._id);\r\n      })\r\n    );\r\n  }, [friends, onlineUsers]);\r\n  return (\r\n    <div className='chatOnline'>\r\n      {onlineFriends.map((friend) => (\r\n        <div\r\n          className='chatOnlineFriend'\r\n          onClick={() => handleClick(friend)}\r\n          key={friend._id}\r\n        >\r\n          <div className='chatOnlineImgContainer'>\r\n            <img\r\n              className='chatOnlineImg'\r\n              src={\r\n                friend?.profilePicture\r\n                  ? PF + friend?.profilePicture\r\n                  : PF + 'person/noAvatar.png'\r\n              }\r\n            />\r\n            <div className='chatOnlineBadge'></div>\r\n          </div>\r\n          <div className='chatOnlineName'>{friend.username}</div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatOnline;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}